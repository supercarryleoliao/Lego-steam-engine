#!/usr/bin/env python3

import time
import statistics
import matplotlib.pyplot as plt
from cued_ia_lego import *


# Simulation parameters
run_time = 200
target_speed = 100
power_fraction = 0.5

# Control parameters
proportional_gain = 0.04
integral_gain = 0.01
derivative_gain = 0.08
bias = 225

# Try to find connected brick
try:
    brick = NXTBrick()
except Exception:
    exit()

# Create sensors - if the model does not have a touch sensor
# measuring the cycle time, set power_fraction to 1.0 above
light_sensor = Light(brick, PORT_1, illuminated=True)
if power_fraction != 1.0:
    touch_sensor = Touch(brick, PORT_2)

# Motor parameters
motor_A = Motor(brick, PORT_A, speedreg=False)
motor_power = bias

# Measure the quiescent light sensor reading
light_readings = []
t_start = time.time()
t_end = t_start + 1
while time.time() < t_end:
    light_readings.append(light_sensor.get_lightness())
quiescent_light = statistics.mean(light_readings)

if power_fraction != 1.0:
    # Spin up the engine on continuous power, estimate the cycle time,
    # allow for switch bounce.
    debounce_interval = 0.05
    motor_A.run(motor_power)
    while not touch_sensor.is_pressed():  # touch
        pass
    time.sleep(debounce_interval)
    while touch_sensor.is_pressed():      # release
        pass
    first_release = time.time()
    time.sleep(debounce_interval)
    while not touch_sensor.is_pressed():  # touch
        pass
    time.sleep(debounce_interval)
    while touch_sensor.is_pressed():      # release
        pass
    second_release = time.time()
    cycle_time = second_release - first_release
else:
    cycle_time = 0.5  # assume this when there is no touch sensor to measure it

# Reset variables
results_time = []
results_light = []
results_power = []
light_reading = 0
integral_error = 0
speed_error = 0
t_start = time.time()
t_end = t_start + run_time
last_touch = t_start
last_release = t_start

# Main control loop
while time.time() < t_end:

    cycle_start = time.time()
    light = []
    motor_A.run(motor_power)
    motor_paused = False

    if power_fraction != 1.0:
        # This is the part of the cycle with the touch sensor released
        while (time.time() < last_release +
               debounce_interval) or not touch_sensor.is_pressed():  # touch
            light.append(light_sensor.get_lightness())
            if ((time.time() - cycle_start) > (power_fraction * cycle_time)) \
               and not motor_paused:
                motor_A.idle()
                motor_paused = True
        last_touch = time.time()

        # This is the part of the cycle with the touch sensor engaged
        while (time.time() < last_touch +
               debounce_interval) or touch_sensor.is_pressed():  # release
            light.append(light_sensor.get_lightness())
            if ((time.time() - cycle_start) > (power_fraction * cycle_time)) \
               and not motor_paused:
                motor_A.idle()
                motor_paused = True
        last_release = time.time()

        # Re-estimate the cycle time
        cycle_time = time.time() - cycle_start

    else:
        # No touch sensor - wait for one cycle
        while time.time() < (cycle_start + cycle_time):
            light.append(light_sensor.get_lightness())

    # Adjust the motor power for the next cycle
    # PID control to achieve the target speed
    # Use old light_reading if no plausible reading this time
    if len(light) > 0:
        light_reading = statistics.mean(light) - quiescent_light
    previous_error = speed_error
    speed_error = light_reading - target_speed
    integral_error = integral_error + speed_error
    motor_power = round(bias + proportional_gain * speed_error + integral_gain
                        * integral_error + derivative_gain *
                        (speed_error - previous_error))
    if motor_power < 300:
        motor_power = 300
    elif motor_power > 0:
        motor_power = 0

    # Display and log results
    print(f'{time.time() - t_start:.3f} {light_reading:.3f} '
          f'{abs(motor_power)}')
    results_time.append(time.time() - t_start)
    results_light.append(light_reading)
    results_power.append(abs(motor_power))

# Power down
motor_A.idle()

# Turn off LED
light_sensor.set_illuminated(False)

# Plot the results
plt.plot(results_time, results_light, label='speed')
plt.plot(results_time, results_power, label='power')
plt.legend()
plt.grid()
plt.xlabel('time (s)')
plt.ylabel('readings')

# Wait for plot to close
print('Close the plot to finish')
plt.show()
